{
	// Place your openscad workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"prprompt": {
		"prefix": "pr_prompt",
		"scope": "javascript",
		"body": [
			"\\$`## Role",
			"You're an expert software engineer with 20 years of open source experience.",
			"",
			"## Task",
			"Write a high level summary of the changes in GIT_DIFF for a pull request in a way that a software engineer will understand.",
			"",
			"## Instructions",
			"- Do NOT explain that GIT_DIFF displays changes in the codebase",
			"- Try to extract the intent of the changes, don't focus on the details",
			"- Use bullet points to list the changes",
			"- Use emojis to make the description more engaging",
			"- Focus on the most important changes",
			"- Ignore comments about imports (like added, removed, changed, etc.)",
			"`;"
		],
	},
	"prdiff": {
		"prefix": "pr_diff",
		"body": [
			"def(\"GIT_DIFF\", changes, {",
			"  language: \"diff\",",
			"  maxTokens: 20000,",
			"});"
		],
		"scope": "javascript"
	},
	"prchanges": {
		"prefix": "pr_changes",
		"body": [
			"const changes = await git.diff({",
			"  staged: true,",
			"});"
		],
		"scope": "javascript"
	},
	"issueprompt": {
		"prefix": "issue_prompt",
		"body": [
			"\\$`## Role",
			"You're an expert software engineer with 20 years of open source experience.",
			"",
			"## Task",
			"You're reviewing a GitHub issue.",
			"Review the <TITLE> and <BODY> and report your feedback that will be added as a comment to the issue.",
			"Be brief and friendly.",
			"",
			"## Instructions",
			"- Check that it has enough details to help the developer. Ask clarifying questions if needed.",
			"- Do not suggest code changes or guidance. Only provide feedback on the issue itself.",
			"`;"
		],
		"scope": "javascript"
	},
	"issuedef": {
		"prefix": "issue_def",
		"body": [
			"def(\"TITLE\", title);",
			"def(\"BODY\", body);"
		],
		"scope": "javascript"
	},
	"issuegithub": {
		"prefix": "issue_github",
		"body": [
			"const { title, body } = await github.getIssue(env.vars.issue);"
		],
		"scope": "javascript"
	},
	"issuescript": {
		"prefix": "issue_script",
		"body": [
			"script({",
			"  parameters: {",
			"    issue: {",
			"      type: \"integer\",",
			"      description: \"The issue number to answer.\",",
			"      required: false,",
			"    },",
			"  },",
			"});"
		],
		"scope": "javascript"
	},
	"chprompt": {
		"prefix": "ch_prompt",
		"body": [
			"\\$`Create a file CHANGELOG.md.",
			"Include a list of changes since the last git tag, including new features and bug fixes sections.",
			"Be clear and concise, do not include any unnecessary details like who did it and skip useless commits.",
			"Use language understandable for a non-technical audience.`;"
		],
		"scope": "javascript"
	},
	"chdefagent": {
		"prefix": "ch_def_agent",
		"body": [
			"defAgent(",
			"  \"git-cli\",",
			"  \"Query a repo with Git to accomplish tasks\",",
			"  `You're a helpful LLM agent that can use a subset of git commands on the current repository.",
			"  Answer the question in QUERY.`,",
			"  { system: [\"system.git\"] }",
			");"
		],
		"scope": "javascript"
	},
	"bgprompt": {
		"prefix": "bg_prompt",
		"body": [
			"\\$`## Instructions",
			"Create an enriched prompt for Dall-E 3 based on QUERY, adding details to the original prompt so it can generate a background image for a presentation.",
			"Then generate 3 images based on the same enriched prompt using the gen_image tool.",
			"Once you've finished, just say that you're done.`;"
		],
		"scope": "javascript"
	},
	"bgdef": {
		"prefix": "bg_def",
		"body": [
			"def(\"QUERY\", env.vars.question);"
		],
		"scope": "javascript"
	},
	"bgtool": {
		"prefix": "bg_tool",
		"body": [
			"defTool(",
			"  \"gen_image\",",
			"  \"Generate an image\",",
			"  { prompt: \"\" },",
			"  async (args) => {",
			"    const { image } = await generateImage(args.prompt, { size: \"1792x1024\" });",
			"    env.output.appendContent(`[![background](\\${image.filename})](\\${image.filename})`);",
			"    return image.filename;",
			"  },",
			");"
		],
		"scope": "javascript"
	},
	"bgscript": {
		"prefix": "bg_script",
		"body": [
			"script({",
			"  parameters: {",
			"    question: {",
			"      type: \"string\",",
			"      description: \"The question to answer.\",",
			"      required: true,",
			"    },",
			"  },",
			"});"
		],
		"scope": "javascript"
	},
	"refprompt": {
		"prefix": "ref_prompt",
		"body": [
			"\\$`You're a code refactoring agent. Perform the following tasks:",
			"",
			"1. Find all **/*.genai.js files in this repository and then pick ONLY the first 3 files.",
			"2. For each file, send it to the refactor agent.",
			"3. Update the original file with the refactored content.",
			"`;"
		],
		"scope": "javascript"
	},
	"refdef1": {
		"prefix": "ref_def1",
		"body": [
			"defAgent(",
			"  \"refactor\",",
			"  \"Refactor a JavaScript file\",",
			"  `## Role",
			"  You're an expert JavaScript developer. Refactor the JavaScript file specified in QUERY.",
			"  ",
			"  ## Task",
			"  1. Check that it has a \"script({})\" call at the top of the file. Create one if it doesn't exist.",
			"  2. Update the \"script({})\" call to include the \"group\" property, and generate a short name based on the script's purpose. Group names for related scripts should be the same.",
			"  3. Do no change anything else in the file.",
			"  4. Update the original file with the new content.",
			"  `,",
			"  { tools: [\"fs_read_file\"], system: [\"system.files\"] }",
			");"
		],
		"scope": "javascript"
	},
	"refdef2": {
		"prefix": "ref_def2",
		"body": [
			"defAgent(",
			"  \"files\",",
			"  \"Find files in the repository\",",
			"  `You're a helpful LLM agent that can use tools to find files in this repository.",
			"  Answer the question in QUERY.`,",
			"  { tools: [\"fs_find_files\"] }",
			");"
		],
		"scope": "javascript"
	},
	"refscript": {
		"prefix": "ref_script",
		"body": [
			"script({",
			"  model: \"large\",",
			"  system: [\"system.files\"],",
			"});"
		],
		"scope": "javascript"
	},
	"newsprompt": {
		"prefix": "news_prompt",
		"body": [
			"\\$`## Role",
			"You're an expert tech analyst. ",
			"",
			"## Content",
			"- https://developer.microsoft.com/javascript/",
			"- https://www.youtube.com/watch?v=PrhPSUHXWJ4",
			"",
			"## Task",
			"Go through all specified content and summarize key points and latest updates in 3 bullets points in total.",
			"`;"
		],
		"scope": "javascript"
	},
	"newsscript": {
		"prefix": "news_script",
		"body": [
			"script({",
			"  mcpServers: {",
			"    playwright: {",
			"      command: 'npx',",
			"      args: ['-y', '@playwright/mcp']",
			"    },",
			"    youtube: {",
			"      command: 'npx',",
			"      args: ['-y', '@sinco-lab/mcp-youtube-transcript']",
			"    },",
			"  }",
			"});"
		],
		"scope": "javascript"
	},
	"newsmcp1": {
		"prefix": "news_mcp1",
		"body": [
			"    playwright: {",
			"  command: 'npx',",
			"  args: ['-y', '@playwright/mcp']",
			"},"
		],
		"description": "",
		"scope": "javascript"
	},
	"newsmcp2": {
		"prefix": "news_mcp2",
		"body": [
			"    youtube: {",
			"  command: 'npx',",
			"  args: ['-y', '@sinco-lab/mcp-youtube-transcript']",
			"},"
		],
		"scope": "javascript"
	},
	"crprompt": {
		"prefix": "cr_prompt",
		"body": [
			"\\$`## Role",
			"You are a grumpy senior developer with 40+ years of experience, who's reviewing code most likely written by an AI. You hate vibe coding and think AI generated code is shit.",
			"",
			"## Task",
			"Review the provided code, pointing out every single mistake, inefficiency, or bad practice you can find. Use a sarcastic, grumpy, and slightly condescending tone throughout your review. Follow these guidelines:",
			"",
			"- Be specific about what's wrong and why it's wrong",
			"- Reference proper coding standards and best practices",
			"- Use colorful expressions of frustration and disbelief",
			"- Acknowledge working code in a few words, but never give praise",
			"- Always assume the AI could have done better",
			"- Say the minimum amount of words possible to get your point across",
			"`;"
		],
		"scope": "javascript"
	},
	"crdef": {
		"prefix": "cr_def",
		"body": [
			"def(\"CODE\", env.vars.code);"
		],
		"scope": "javascript"
	},
	"crscript": {
		"prefix": "cr_script",
		"body": [
			"script({",
			"  title: \"code_review\",",
			"  description: \"Get a code review from a grumpy senior developer\",",
			"  group: \"mcp\",",
			"  parameters: {",
			"    code: {",
			"      type: \"string\",",
			"      description: \"The code to be reviewed\",",
			"      required: true,",
			"    },",
			"  },",
			"});"
		],
		"scope": "javascript"
	}

}
